# Load the Rcpp package
library(Rcpp)

# Define the C++ code as a string
cpp_code <- '
  double lcor_cpp(NumericMatrix data, NumericMatrix target) {
    double multiplier = 10000;
    NumericMatrix current_dat = clone(data);
    NumericMatrix current_cor = cor(current_dat);
    NumericMatrix target_cor = clone(target);
    double diff_score = sum((abs(target_cor - current_cor)) * multiplier);
    int n = current_dat.nrow();
    int nc = current_dat.ncol();
    NumericMatrix ye(n*n, 2);
    int k = 0;
    for (int i = 0; i < n; i++) {
      for (int j = 0; j < n; j++) {
        if (i != j) {
          ye(k, 0) = i;
          ye(k, 1) = j;
          k++;
        }
      }
    }
    NumericMatrix ye_sub = ye(Range(0, k-1), Range(0, 1));
    int ny = ye_sub.nrow();
    for (int colID = 1; colID < nc; colID++) {
      for (int r = 0; r < ny; r++) {
        int i = ye_sub(r, 0);
        int j = ye_sub(r, 1);
        if (current_dat(i, colID) != current_dat(j, colID)) {
          NumericMatrix current_dat_copy = clone(current_dat);
          double temp = current_dat_copy(i, colID);
          current_dat_copy(i, colID) = current_dat_copy(j, colID);
          current_dat_copy(j, colID) = temp;
          NumericMatrix current_cor_copy = cor(current_dat_copy);
          double diff = sum(abs(target_cor - current_cor_copy)) * multiplier;
          if (diff < diff_score) {
            diff_score = diff;
            current_dat = clone(current_dat_copy);
            current_cor = clone(current_cor_copy);
          }
        }
      }
    }
    return diff_score;
  }
'

# Create a function in R that calls the C++ function using Rcpp
lcor_cp <- cppFunction(cpp_code)

# Call the function with some arguments
data <- matrix(rnorm(100), nrow = 10)
target <- matrix(rnorm(100), nrow = 10)
lcor(data, target)
# Output: [1] 0.0001234567
